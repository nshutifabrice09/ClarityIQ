// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bVumzfkpaXXcvNmP8r5aNd
// Component: gv0Q_KziB627

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: bVumzfkpaXXcvNmP8r5aNd/projectcss
import sty from "./PlasmicThirdfinancialperformance.module.css"; // plasmic-import: gv0Q_KziB627/css

import Menu51Icon from "./icons/PlasmicIcon__Menu51"; // plasmic-import: QnHOpjV_SKMJ/icon
import Line8Icon from "./icons/PlasmicIcon__Line8"; // plasmic-import: zf9IrrU7pd4v/icon

createPlasmicElementProxy;

export type PlasmicThirdfinancialperformance__VariantMembers = {};
export type PlasmicThirdfinancialperformance__VariantsArgs = {};
type VariantPropType = keyof PlasmicThirdfinancialperformance__VariantsArgs;
export const PlasmicThirdfinancialperformance__VariantProps =
  new Array<VariantPropType>();

export type PlasmicThirdfinancialperformance__ArgsType = {};
type ArgPropType = keyof PlasmicThirdfinancialperformance__ArgsType;
export const PlasmicThirdfinancialperformance__ArgProps =
  new Array<ArgPropType>();

export type PlasmicThirdfinancialperformance__OverridesType = {
  root?: Flex__<"div">;
  container39?: Flex__<"div">;
  container40?: Flex__<"div">;
  rectangle4?: Flex__<"div">;
  rectangle5?: Flex__<"div">;
  container41?: Flex__<"div">;
  rectangle6?: Flex__<"div">;
  container42?: Flex__<"div">;
  user?: Flex__<"div">;
  purchase?: Flex__<"div">;
  container43?: Flex__<"div">;
  rectangle7?: Flex__<"div">;
  rectangle8?: Flex__<"div">;
  container44?: Flex__<"div">;
  rectangle9?: Flex__<"div">;
  container45?: Flex__<"div">;
  signIn?: Flex__<"div">;
  buyProduct?: Flex__<"div">;
};

export interface DefaultThirdfinancialperformanceProps {
  className?: string;
}

const $$ = {};

function PlasmicThirdfinancialperformance__RenderFunc(props: {
  variants: PlasmicThirdfinancialperformance__VariantsArgs;
  args: PlasmicThirdfinancialperformance__ArgsType;
  overrides: PlasmicThirdfinancialperformance__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"container39"}
        data-plasmic-override={overrides.container39}
        className={classNames(projectcss.all, sty.container39)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__aPFk
          )}
        >
          {
            "The percentage of website visitors who make a purchase is the sales conversion rate."
          }
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__sBRc7
          )}
        >
          {" service quality metrics"}
        </div>
        <Menu51Icon
          className={classNames(projectcss.all, sty.svg__kEiF7)}
          role={"img"}
        />

        <div
          data-plasmic-name={"container40"}
          data-plasmic-override={overrides.container40}
          className={classNames(projectcss.all, sty.container40)}
        >
          <div
            data-plasmic-name={"rectangle4"}
            data-plasmic-override={overrides.rectangle4}
            className={classNames(projectcss.all, sty.rectangle4)}
          />

          <div
            data-plasmic-name={"rectangle5"}
            data-plasmic-override={overrides.rectangle5}
            className={classNames(projectcss.all, sty.rectangle5)}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__vldm8
            )}
          >
            {"decision-making"}
          </div>
          <Line8Icon
            className={classNames(projectcss.all, sty.svg__dq5D4)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__iGwd0
            )}
          >
            {"25%"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__dlYZm
            )}
          >
            {"100%"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__vy4OG
            )}
          >
            {"0"}
          </div>
          <div
            data-plasmic-name={"container41"}
            data-plasmic-override={overrides.container41}
            className={classNames(projectcss.all, sty.container41)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___0ESo
              )}
            >
              {"100%"}
            </div>
          </div>
          <div
            data-plasmic-name={"rectangle6"}
            data-plasmic-override={overrides.rectangle6}
            className={classNames(projectcss.all, sty.rectangle6)}
          />

          <div
            data-plasmic-name={"container42"}
            data-plasmic-override={overrides.container42}
            className={classNames(projectcss.all, sty.container42)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__sGy2F
              )}
            >
              {"15%"}
            </div>
          </div>
          <div
            data-plasmic-name={"user"}
            data-plasmic-override={overrides.user}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.user
            )}
          >
            {"Vendor 1"}
          </div>
          <div
            data-plasmic-name={"purchase"}
            data-plasmic-override={overrides.purchase}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.purchase
            )}
          >
            {"Vendor 2"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__cevIi
            )}
          >
            {"50%"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___7Vfxf
            )}
          >
            {"75%"}
          </div>
        </div>
        <div
          data-plasmic-name={"container43"}
          data-plasmic-override={overrides.container43}
          className={classNames(projectcss.all, sty.container43)}
        >
          <div
            data-plasmic-name={"rectangle7"}
            data-plasmic-override={overrides.rectangle7}
            className={classNames(projectcss.all, sty.rectangle7)}
          />

          <div
            data-plasmic-name={"rectangle8"}
            data-plasmic-override={overrides.rectangle8}
            className={classNames(projectcss.all, sty.rectangle8)}
          />

          <Line8Icon
            className={classNames(projectcss.all, sty.svg___913IW)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__racIx
            )}
          >
            {"25%"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__agizG
            )}
          >
            {"100%"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__cKrrP
            )}
          >
            {"0"}
          </div>
          <div
            data-plasmic-name={"container44"}
            data-plasmic-override={overrides.container44}
            className={classNames(projectcss.all, sty.container44)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__es5Fz
              )}
            >
              {"100%"}
            </div>
          </div>
          <div
            data-plasmic-name={"rectangle9"}
            data-plasmic-override={overrides.rectangle9}
            className={classNames(projectcss.all, sty.rectangle9)}
          />

          <div
            data-plasmic-name={"container45"}
            data-plasmic-override={overrides.container45}
            className={classNames(projectcss.all, sty.container45)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__lPS2
              )}
            >
              {"45%"}
            </div>
          </div>
          <div
            data-plasmic-name={"signIn"}
            data-plasmic-override={overrides.signIn}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.signIn
            )}
          >
            {"Vendor1 "}
          </div>
          <div
            data-plasmic-name={"buyProduct"}
            data-plasmic-override={overrides.buyProduct}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.buyProduct
            )}
          >
            {"Vendor2"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__djium
            )}
          >
            {"50%"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__jsldg
            )}
          >
            {"75%"}
          </div>
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__cTjWx
          )}
        >
          {"Back"}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "container39",
    "container40",
    "rectangle4",
    "rectangle5",
    "container41",
    "rectangle6",
    "container42",
    "user",
    "purchase",
    "container43",
    "rectangle7",
    "rectangle8",
    "container44",
    "rectangle9",
    "container45",
    "signIn",
    "buyProduct"
  ],
  container39: [
    "container39",
    "container40",
    "rectangle4",
    "rectangle5",
    "container41",
    "rectangle6",
    "container42",
    "user",
    "purchase",
    "container43",
    "rectangle7",
    "rectangle8",
    "container44",
    "rectangle9",
    "container45",
    "signIn",
    "buyProduct"
  ],
  container40: [
    "container40",
    "rectangle4",
    "rectangle5",
    "container41",
    "rectangle6",
    "container42",
    "user",
    "purchase"
  ],
  rectangle4: ["rectangle4"],
  rectangle5: ["rectangle5"],
  container41: ["container41"],
  rectangle6: ["rectangle6"],
  container42: ["container42"],
  user: ["user"],
  purchase: ["purchase"],
  container43: [
    "container43",
    "rectangle7",
    "rectangle8",
    "container44",
    "rectangle9",
    "container45",
    "signIn",
    "buyProduct"
  ],
  rectangle7: ["rectangle7"],
  rectangle8: ["rectangle8"],
  container44: ["container44"],
  rectangle9: ["rectangle9"],
  container45: ["container45"],
  signIn: ["signIn"],
  buyProduct: ["buyProduct"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  container39: "div";
  container40: "div";
  rectangle4: "div";
  rectangle5: "div";
  container41: "div";
  rectangle6: "div";
  container42: "div";
  user: "div";
  purchase: "div";
  container43: "div";
  rectangle7: "div";
  rectangle8: "div";
  container44: "div";
  rectangle9: "div";
  container45: "div";
  signIn: "div";
  buyProduct: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicThirdfinancialperformance__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicThirdfinancialperformance__VariantsArgs;
    args?: PlasmicThirdfinancialperformance__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicThirdfinancialperformance__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicThirdfinancialperformance__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicThirdfinancialperformance__ArgProps,
          internalVariantPropNames:
            PlasmicThirdfinancialperformance__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicThirdfinancialperformance__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicThirdfinancialperformance";
  } else {
    func.displayName = `PlasmicThirdfinancialperformance.${nodeName}`;
  }
  return func;
}

export const PlasmicThirdfinancialperformance = Object.assign(
  // Top-level PlasmicThirdfinancialperformance renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    container39: makeNodeComponent("container39"),
    container40: makeNodeComponent("container40"),
    rectangle4: makeNodeComponent("rectangle4"),
    rectangle5: makeNodeComponent("rectangle5"),
    container41: makeNodeComponent("container41"),
    rectangle6: makeNodeComponent("rectangle6"),
    container42: makeNodeComponent("container42"),
    user: makeNodeComponent("user"),
    purchase: makeNodeComponent("purchase"),
    container43: makeNodeComponent("container43"),
    rectangle7: makeNodeComponent("rectangle7"),
    rectangle8: makeNodeComponent("rectangle8"),
    container44: makeNodeComponent("container44"),
    rectangle9: makeNodeComponent("rectangle9"),
    container45: makeNodeComponent("container45"),
    signIn: makeNodeComponent("signIn"),
    buyProduct: makeNodeComponent("buyProduct"),

    // Metadata about props expected for PlasmicThirdfinancialperformance
    internalVariantProps: PlasmicThirdfinancialperformance__VariantProps,
    internalArgProps: PlasmicThirdfinancialperformance__ArgProps
  }
);

export default PlasmicThirdfinancialperformance;
/* prettier-ignore-end */
