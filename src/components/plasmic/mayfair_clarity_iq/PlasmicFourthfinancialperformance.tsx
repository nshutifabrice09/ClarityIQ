// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bVumzfkpaXXcvNmP8r5aNd
// Component: C8nCeG_RAdS-

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: bVumzfkpaXXcvNmP8r5aNd/projectcss
import sty from "./PlasmicFourthfinancialperformance.module.css"; // plasmic-import: C8nCeG_RAdS-/css

import PenIcon from "./icons/PlasmicIcon__Pen"; // plasmic-import: 5aTSGxf42rK6/icon
import Group31Icon from "./icons/PlasmicIcon__Group31"; // plasmic-import: UmgPQiVVvGM7/icon
import EllipseIcon from "./icons/PlasmicIcon__Ellipse"; // plasmic-import: OL9uoJ4OqaKE/icon

createPlasmicElementProxy;

export type PlasmicFourthfinancialperformance__VariantMembers = {};
export type PlasmicFourthfinancialperformance__VariantsArgs = {};
type VariantPropType = keyof PlasmicFourthfinancialperformance__VariantsArgs;
export const PlasmicFourthfinancialperformance__VariantProps =
  new Array<VariantPropType>();

export type PlasmicFourthfinancialperformance__ArgsType = {};
type ArgPropType = keyof PlasmicFourthfinancialperformance__ArgsType;
export const PlasmicFourthfinancialperformance__ArgProps =
  new Array<ArgPropType>();

export type PlasmicFourthfinancialperformance__OverridesType = {
  root?: Flex__<"div">;
  container98?: Flex__<"div">;
  performanceMetrics?: Flex__<"div">;
  table5?: Flex__<"div">;
  row?: Flex__<"div">;
  frame?: Flex__<"div">;
  frame2?: Flex__<"div">;
  solved?: Flex__<"div">;
  frame3?: Flex__<"div">;
  row2?: Flex__<"div">;
  frame4?: Flex__<"div">;
  frame5?: Flex__<"div">;
  unsolved?: Flex__<"div">;
  frame6?: Flex__<"div">;
  row3?: Flex__<"div">;
  frame7?: Flex__<"div">;
  frame8?: Flex__<"div">;
  frame9?: Flex__<"div">;
  pending?: Flex__<"div">;
  row4?: Flex__<"div">;
  frame10?: Flex__<"div">;
  frame11?: Flex__<"div">;
  others?: Flex__<"div">;
  frame12?: Flex__<"div">;
  columnBarChart1?: Flex__<"div">;
  chart?: Flex__<"div">;
  rectangle?: Flex__<"div">;
  rectangle2?: Flex__<"div">;
  rectangle3?: Flex__<"div">;
  rectangle4?: Flex__<"div">;
  rectangle5?: Flex__<"div">;
  rectangle6?: Flex__<"div">;
  rectangle7?: Flex__<"div">;
  rectangle8?: Flex__<"div">;
  rectangle9?: Flex__<"div">;
  rectangle10?: Flex__<"div">;
  rectangle11?: Flex__<"div">;
  rectangle12?: Flex__<"div">;
  rectangle13?: Flex__<"div">;
  rectangle14?: Flex__<"div">;
  frame13?: Flex__<"div">;
  group?: Flex__<"div">;
  services?: Flex__<"div">;
  group2?: Flex__<"div">;
  passengerSatisfaction?: Flex__<"div">;
  group37?: Flex__<"div">;
  breakdownByStatus?: Flex__<"div">;
  rectangle15?: Flex__<"div">;
  rectangle16?: Flex__<"div">;
  rectangle17?: Flex__<"div">;
  rectangle18?: Flex__<"div">;
};

export interface DefaultFourthfinancialperformanceProps {
  className?: string;
}

const $$ = {};

function PlasmicFourthfinancialperformance__RenderFunc(props: {
  variants: PlasmicFourthfinancialperformance__VariantsArgs;
  args: PlasmicFourthfinancialperformance__ArgsType;
  overrides: PlasmicFourthfinancialperformance__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"container98"}
        data-plasmic-override={overrides.container98}
        className={classNames(projectcss.all, sty.container98)}
      >
        <div
          data-plasmic-name={"performanceMetrics"}
          data-plasmic-override={overrides.performanceMetrics}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.performanceMetrics
          )}
        >
          {"Functional areas"}
        </div>
        <div
          data-plasmic-name={"table5"}
          data-plasmic-override={overrides.table5}
          className={classNames(projectcss.all, sty.table5)}
        >
          <div
            data-plasmic-name={"row"}
            data-plasmic-override={overrides.row}
            className={classNames(projectcss.all, sty.row)}
          >
            <div
              data-plasmic-name={"frame"}
              data-plasmic-override={overrides.frame}
              className={classNames(projectcss.all, sty.frame)}
            >
              <PenIcon
                className={classNames(projectcss.all, sty.svg__k26LR)}
                role={"img"}
              />
            </div>
            <div
              data-plasmic-name={"frame2"}
              data-plasmic-override={overrides.frame2}
              className={classNames(projectcss.all, sty.frame2)}
            >
              <div
                data-plasmic-name={"solved"}
                data-plasmic-override={overrides.solved}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.solved
                )}
              >
                {"Marketing"}
              </div>
            </div>
            <div
              data-plasmic-name={"frame3"}
              data-plasmic-override={overrides.frame3}
              className={classNames(projectcss.all, sty.frame3)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lZbTt
                )}
              >
                {"92"}
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"row2"}
            data-plasmic-override={overrides.row2}
            className={classNames(projectcss.all, sty.row2)}
          >
            <div
              data-plasmic-name={"frame4"}
              data-plasmic-override={overrides.frame4}
              className={classNames(projectcss.all, sty.frame4)}
            >
              <PenIcon
                className={classNames(projectcss.all, sty.svg__yRckS)}
                role={"img"}
              />
            </div>
            <div
              data-plasmic-name={"frame5"}
              data-plasmic-override={overrides.frame5}
              className={classNames(projectcss.all, sty.frame5)}
            >
              <div
                data-plasmic-name={"unsolved"}
                data-plasmic-override={overrides.unsolved}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.unsolved
                )}
              >
                {"Sales"}
              </div>
            </div>
            <div
              data-plasmic-name={"frame6"}
              data-plasmic-override={overrides.frame6}
              className={classNames(projectcss.all, sty.frame6)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rUcMc
                )}
              >
                {"50"}
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"row3"}
            data-plasmic-override={overrides.row3}
            className={classNames(projectcss.all, sty.row3)}
          >
            <div
              data-plasmic-name={"frame7"}
              data-plasmic-override={overrides.frame7}
              className={classNames(projectcss.all, sty.frame7)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9IWzw
                )}
              >
                {"6"}
              </div>
            </div>
            <div
              data-plasmic-name={"frame8"}
              data-plasmic-override={overrides.frame8}
              className={classNames(projectcss.all, sty.frame8)}
            >
              <PenIcon
                className={classNames(projectcss.all, sty.svg__dmSbm)}
                role={"img"}
              />
            </div>
            <div
              data-plasmic-name={"frame9"}
              data-plasmic-override={overrides.frame9}
              className={classNames(projectcss.all, sty.frame9)}
            >
              <div
                data-plasmic-name={"pending"}
                data-plasmic-override={overrides.pending}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.pending
                )}
              >
                {"Finance"}
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"row4"}
            data-plasmic-override={overrides.row4}
            className={classNames(projectcss.all, sty.row4)}
          >
            <div
              data-plasmic-name={"frame10"}
              data-plasmic-override={overrides.frame10}
              className={classNames(projectcss.all, sty.frame10)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__utVf
                )}
              >
                {"16"}
              </div>
            </div>
            <div
              data-plasmic-name={"frame11"}
              data-plasmic-override={overrides.frame11}
              className={classNames(projectcss.all, sty.frame11)}
            >
              <div
                data-plasmic-name={"others"}
                data-plasmic-override={overrides.others}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.others
                )}
              >
                {"Human Resources (HR)"}
              </div>
            </div>
            <div
              data-plasmic-name={"frame12"}
              data-plasmic-override={overrides.frame12}
              className={classNames(projectcss.all, sty.frame12)}
            >
              <PenIcon
                className={classNames(projectcss.all, sty.svg___1HRxq)}
                role={"img"}
              />
            </div>
          </div>
        </div>
        <div
          data-plasmic-name={"columnBarChart1"}
          data-plasmic-override={overrides.columnBarChart1}
          className={classNames(projectcss.all, sty.columnBarChart1)}
        >
          <Group31Icon
            className={classNames(projectcss.all, sty.svg__vJix)}
            role={"img"}
          />

          <div
            data-plasmic-name={"chart"}
            data-plasmic-override={overrides.chart}
            className={classNames(projectcss.all, sty.chart)}
          >
            <div
              data-plasmic-name={"rectangle"}
              data-plasmic-override={overrides.rectangle}
              className={classNames(projectcss.all, sty.rectangle)}
            />

            <div
              data-plasmic-name={"rectangle2"}
              data-plasmic-override={overrides.rectangle2}
              className={classNames(projectcss.all, sty.rectangle2)}
            />

            <div
              data-plasmic-name={"rectangle3"}
              data-plasmic-override={overrides.rectangle3}
              className={classNames(projectcss.all, sty.rectangle3)}
            />

            <div
              data-plasmic-name={"rectangle4"}
              data-plasmic-override={overrides.rectangle4}
              className={classNames(projectcss.all, sty.rectangle4)}
            />

            <div
              data-plasmic-name={"rectangle5"}
              data-plasmic-override={overrides.rectangle5}
              className={classNames(projectcss.all, sty.rectangle5)}
            />

            <div
              data-plasmic-name={"rectangle6"}
              data-plasmic-override={overrides.rectangle6}
              className={classNames(projectcss.all, sty.rectangle6)}
            />

            <div
              data-plasmic-name={"rectangle7"}
              data-plasmic-override={overrides.rectangle7}
              className={classNames(projectcss.all, sty.rectangle7)}
            />

            <div
              data-plasmic-name={"rectangle8"}
              data-plasmic-override={overrides.rectangle8}
              className={classNames(projectcss.all, sty.rectangle8)}
            />

            <div
              data-plasmic-name={"rectangle9"}
              data-plasmic-override={overrides.rectangle9}
              className={classNames(projectcss.all, sty.rectangle9)}
            />

            <div
              data-plasmic-name={"rectangle10"}
              data-plasmic-override={overrides.rectangle10}
              className={classNames(projectcss.all, sty.rectangle10)}
            />

            <div
              data-plasmic-name={"rectangle11"}
              data-plasmic-override={overrides.rectangle11}
              className={classNames(projectcss.all, sty.rectangle11)}
            />

            <div
              data-plasmic-name={"rectangle12"}
              data-plasmic-override={overrides.rectangle12}
              className={classNames(projectcss.all, sty.rectangle12)}
            />

            <div
              data-plasmic-name={"rectangle13"}
              data-plasmic-override={overrides.rectangle13}
              className={classNames(projectcss.all, sty.rectangle13)}
            />

            <div
              data-plasmic-name={"rectangle14"}
              data-plasmic-override={overrides.rectangle14}
              className={classNames(projectcss.all, sty.rectangle14)}
            />
          </div>
          <div
            data-plasmic-name={"frame13"}
            data-plasmic-override={overrides.frame13}
            className={classNames(projectcss.all, sty.frame13)}
          >
            <div
              data-plasmic-name={"group"}
              data-plasmic-override={overrides.group}
              className={classNames(projectcss.all, sty.group)}
            >
              <EllipseIcon
                className={classNames(projectcss.all, sty.svg___2OvZw)}
                role={"img"}
              />

              <div
                data-plasmic-name={"services"}
                data-plasmic-override={overrides.services}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.services
                )}
              >
                {"Services "}
              </div>
            </div>
            <div
              data-plasmic-name={"group2"}
              data-plasmic-override={overrides.group2}
              className={classNames(projectcss.all, sty.group2)}
            >
              <EllipseIcon
                className={classNames(projectcss.all, sty.svg__ohdu4)}
                role={"img"}
              />

              <div
                data-plasmic-name={"passengerSatisfaction"}
                data-plasmic-override={overrides.passengerSatisfaction}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.passengerSatisfaction
                )}
              >
                {"Functional areas"}
              </div>
            </div>
          </div>
        </div>
        <div
          data-plasmic-name={"group37"}
          data-plasmic-override={overrides.group37}
          className={classNames(projectcss.all, sty.group37)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__bqgcA
            )}
          >
            {"0"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__p8MI
            )}
          >
            {"10"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__okwVn
            )}
          >
            {"20"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___8DtIr
            )}
          >
            {"30"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__w3JkC
            )}
          >
            {"40"}
          </div>
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__w1Cl
          )}
        >
          {"Mon"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__tmu2J
          )}
        >
          {"Tue"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__mbsfa
          )}
        >
          {"Wed"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__vGuE
          )}
        >
          {"Thu"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__loxMn
          )}
        >
          {"Fri"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___3ZYtW
          )}
        >
          {"Sat"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__lfwrU
          )}
        >
          {"Sun"}
        </div>
        <div
          data-plasmic-name={"breakdownByStatus"}
          data-plasmic-override={overrides.breakdownByStatus}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.breakdownByStatus
          )}
        >
          {"Functional areas"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__vE91K
          )}
        >
          {"0%"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__xMAgd
          )}
        >
          {"100%"}
        </div>
        <div
          data-plasmic-name={"rectangle15"}
          data-plasmic-override={overrides.rectangle15}
          className={classNames(projectcss.all, sty.rectangle15)}
        />

        <div
          data-plasmic-name={"rectangle16"}
          data-plasmic-override={overrides.rectangle16}
          className={classNames(projectcss.all, sty.rectangle16)}
        />

        <div
          data-plasmic-name={"rectangle17"}
          data-plasmic-override={overrides.rectangle17}
          className={classNames(projectcss.all, sty.rectangle17)}
        />

        <div
          data-plasmic-name={"rectangle18"}
          data-plasmic-override={overrides.rectangle18}
          className={classNames(projectcss.all, sty.rectangle18)}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "container98",
    "performanceMetrics",
    "table5",
    "row",
    "frame",
    "frame2",
    "solved",
    "frame3",
    "row2",
    "frame4",
    "frame5",
    "unsolved",
    "frame6",
    "row3",
    "frame7",
    "frame8",
    "frame9",
    "pending",
    "row4",
    "frame10",
    "frame11",
    "others",
    "frame12",
    "columnBarChart1",
    "chart",
    "rectangle",
    "rectangle2",
    "rectangle3",
    "rectangle4",
    "rectangle5",
    "rectangle6",
    "rectangle7",
    "rectangle8",
    "rectangle9",
    "rectangle10",
    "rectangle11",
    "rectangle12",
    "rectangle13",
    "rectangle14",
    "frame13",
    "group",
    "services",
    "group2",
    "passengerSatisfaction",
    "group37",
    "breakdownByStatus",
    "rectangle15",
    "rectangle16",
    "rectangle17",
    "rectangle18"
  ],
  container98: [
    "container98",
    "performanceMetrics",
    "table5",
    "row",
    "frame",
    "frame2",
    "solved",
    "frame3",
    "row2",
    "frame4",
    "frame5",
    "unsolved",
    "frame6",
    "row3",
    "frame7",
    "frame8",
    "frame9",
    "pending",
    "row4",
    "frame10",
    "frame11",
    "others",
    "frame12",
    "columnBarChart1",
    "chart",
    "rectangle",
    "rectangle2",
    "rectangle3",
    "rectangle4",
    "rectangle5",
    "rectangle6",
    "rectangle7",
    "rectangle8",
    "rectangle9",
    "rectangle10",
    "rectangle11",
    "rectangle12",
    "rectangle13",
    "rectangle14",
    "frame13",
    "group",
    "services",
    "group2",
    "passengerSatisfaction",
    "group37",
    "breakdownByStatus",
    "rectangle15",
    "rectangle16",
    "rectangle17",
    "rectangle18"
  ],
  performanceMetrics: ["performanceMetrics"],
  table5: [
    "table5",
    "row",
    "frame",
    "frame2",
    "solved",
    "frame3",
    "row2",
    "frame4",
    "frame5",
    "unsolved",
    "frame6",
    "row3",
    "frame7",
    "frame8",
    "frame9",
    "pending",
    "row4",
    "frame10",
    "frame11",
    "others",
    "frame12"
  ],
  row: ["row", "frame", "frame2", "solved", "frame3"],
  frame: ["frame"],
  frame2: ["frame2", "solved"],
  solved: ["solved"],
  frame3: ["frame3"],
  row2: ["row2", "frame4", "frame5", "unsolved", "frame6"],
  frame4: ["frame4"],
  frame5: ["frame5", "unsolved"],
  unsolved: ["unsolved"],
  frame6: ["frame6"],
  row3: ["row3", "frame7", "frame8", "frame9", "pending"],
  frame7: ["frame7"],
  frame8: ["frame8"],
  frame9: ["frame9", "pending"],
  pending: ["pending"],
  row4: ["row4", "frame10", "frame11", "others", "frame12"],
  frame10: ["frame10"],
  frame11: ["frame11", "others"],
  others: ["others"],
  frame12: ["frame12"],
  columnBarChart1: [
    "columnBarChart1",
    "chart",
    "rectangle",
    "rectangle2",
    "rectangle3",
    "rectangle4",
    "rectangle5",
    "rectangle6",
    "rectangle7",
    "rectangle8",
    "rectangle9",
    "rectangle10",
    "rectangle11",
    "rectangle12",
    "rectangle13",
    "rectangle14",
    "frame13",
    "group",
    "services",
    "group2",
    "passengerSatisfaction"
  ],
  chart: [
    "chart",
    "rectangle",
    "rectangle2",
    "rectangle3",
    "rectangle4",
    "rectangle5",
    "rectangle6",
    "rectangle7",
    "rectangle8",
    "rectangle9",
    "rectangle10",
    "rectangle11",
    "rectangle12",
    "rectangle13",
    "rectangle14"
  ],
  rectangle: ["rectangle"],
  rectangle2: ["rectangle2"],
  rectangle3: ["rectangle3"],
  rectangle4: ["rectangle4"],
  rectangle5: ["rectangle5"],
  rectangle6: ["rectangle6"],
  rectangle7: ["rectangle7"],
  rectangle8: ["rectangle8"],
  rectangle9: ["rectangle9"],
  rectangle10: ["rectangle10"],
  rectangle11: ["rectangle11"],
  rectangle12: ["rectangle12"],
  rectangle13: ["rectangle13"],
  rectangle14: ["rectangle14"],
  frame13: ["frame13", "group", "services", "group2", "passengerSatisfaction"],
  group: ["group", "services"],
  services: ["services"],
  group2: ["group2", "passengerSatisfaction"],
  passengerSatisfaction: ["passengerSatisfaction"],
  group37: ["group37"],
  breakdownByStatus: ["breakdownByStatus"],
  rectangle15: ["rectangle15"],
  rectangle16: ["rectangle16"],
  rectangle17: ["rectangle17"],
  rectangle18: ["rectangle18"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  container98: "div";
  performanceMetrics: "div";
  table5: "div";
  row: "div";
  frame: "div";
  frame2: "div";
  solved: "div";
  frame3: "div";
  row2: "div";
  frame4: "div";
  frame5: "div";
  unsolved: "div";
  frame6: "div";
  row3: "div";
  frame7: "div";
  frame8: "div";
  frame9: "div";
  pending: "div";
  row4: "div";
  frame10: "div";
  frame11: "div";
  others: "div";
  frame12: "div";
  columnBarChart1: "div";
  chart: "div";
  rectangle: "div";
  rectangle2: "div";
  rectangle3: "div";
  rectangle4: "div";
  rectangle5: "div";
  rectangle6: "div";
  rectangle7: "div";
  rectangle8: "div";
  rectangle9: "div";
  rectangle10: "div";
  rectangle11: "div";
  rectangle12: "div";
  rectangle13: "div";
  rectangle14: "div";
  frame13: "div";
  group: "div";
  services: "div";
  group2: "div";
  passengerSatisfaction: "div";
  group37: "div";
  breakdownByStatus: "div";
  rectangle15: "div";
  rectangle16: "div";
  rectangle17: "div";
  rectangle18: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFourthfinancialperformance__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFourthfinancialperformance__VariantsArgs;
    args?: PlasmicFourthfinancialperformance__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFourthfinancialperformance__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFourthfinancialperformance__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFourthfinancialperformance__ArgProps,
          internalVariantPropNames:
            PlasmicFourthfinancialperformance__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFourthfinancialperformance__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFourthfinancialperformance";
  } else {
    func.displayName = `PlasmicFourthfinancialperformance.${nodeName}`;
  }
  return func;
}

export const PlasmicFourthfinancialperformance = Object.assign(
  // Top-level PlasmicFourthfinancialperformance renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    container98: makeNodeComponent("container98"),
    performanceMetrics: makeNodeComponent("performanceMetrics"),
    table5: makeNodeComponent("table5"),
    row: makeNodeComponent("row"),
    frame: makeNodeComponent("frame"),
    frame2: makeNodeComponent("frame2"),
    solved: makeNodeComponent("solved"),
    frame3: makeNodeComponent("frame3"),
    row2: makeNodeComponent("row2"),
    frame4: makeNodeComponent("frame4"),
    frame5: makeNodeComponent("frame5"),
    unsolved: makeNodeComponent("unsolved"),
    frame6: makeNodeComponent("frame6"),
    row3: makeNodeComponent("row3"),
    frame7: makeNodeComponent("frame7"),
    frame8: makeNodeComponent("frame8"),
    frame9: makeNodeComponent("frame9"),
    pending: makeNodeComponent("pending"),
    row4: makeNodeComponent("row4"),
    frame10: makeNodeComponent("frame10"),
    frame11: makeNodeComponent("frame11"),
    others: makeNodeComponent("others"),
    frame12: makeNodeComponent("frame12"),
    columnBarChart1: makeNodeComponent("columnBarChart1"),
    chart: makeNodeComponent("chart"),
    rectangle: makeNodeComponent("rectangle"),
    rectangle2: makeNodeComponent("rectangle2"),
    rectangle3: makeNodeComponent("rectangle3"),
    rectangle4: makeNodeComponent("rectangle4"),
    rectangle5: makeNodeComponent("rectangle5"),
    rectangle6: makeNodeComponent("rectangle6"),
    rectangle7: makeNodeComponent("rectangle7"),
    rectangle8: makeNodeComponent("rectangle8"),
    rectangle9: makeNodeComponent("rectangle9"),
    rectangle10: makeNodeComponent("rectangle10"),
    rectangle11: makeNodeComponent("rectangle11"),
    rectangle12: makeNodeComponent("rectangle12"),
    rectangle13: makeNodeComponent("rectangle13"),
    rectangle14: makeNodeComponent("rectangle14"),
    frame13: makeNodeComponent("frame13"),
    group: makeNodeComponent("group"),
    services: makeNodeComponent("services"),
    group2: makeNodeComponent("group2"),
    passengerSatisfaction: makeNodeComponent("passengerSatisfaction"),
    group37: makeNodeComponent("group37"),
    breakdownByStatus: makeNodeComponent("breakdownByStatus"),
    rectangle15: makeNodeComponent("rectangle15"),
    rectangle16: makeNodeComponent("rectangle16"),
    rectangle17: makeNodeComponent("rectangle17"),
    rectangle18: makeNodeComponent("rectangle18"),

    // Metadata about props expected for PlasmicFourthfinancialperformance
    internalVariantProps: PlasmicFourthfinancialperformance__VariantProps,
    internalArgProps: PlasmicFourthfinancialperformance__ArgProps
  }
);

export default PlasmicFourthfinancialperformance;
/* prettier-ignore-end */
