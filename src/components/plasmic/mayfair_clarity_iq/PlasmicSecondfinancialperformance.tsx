// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bVumzfkpaXXcvNmP8r5aNd
// Component: kIJNL8u7s-S8

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: bVumzfkpaXXcvNmP8r5aNd/projectcss
import sty from "./PlasmicSecondfinancialperformance.module.css"; // plasmic-import: kIJNL8u7s-S8/css

import CaretRightIcon from "./icons/PlasmicIcon__CaretRight"; // plasmic-import: 4IJCrAtMVMu5/icon
import resizingHandle2W49CoVsCtl1J from "./images/resizingHandle2.svg"; // plasmic-import: w49CoVsCtl1J/picture
import resizingHandle3HjPreqQRvos from "./images/resizingHandle3.svg"; // plasmic-import: HjPreqQ-Rvos/picture

createPlasmicElementProxy;

export type PlasmicSecondfinancialperformance__VariantMembers = {};
export type PlasmicSecondfinancialperformance__VariantsArgs = {};
type VariantPropType = keyof PlasmicSecondfinancialperformance__VariantsArgs;
export const PlasmicSecondfinancialperformance__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSecondfinancialperformance__ArgsType = {};
type ArgPropType = keyof PlasmicSecondfinancialperformance__ArgsType;
export const PlasmicSecondfinancialperformance__ArgProps =
  new Array<ArgPropType>();

export type PlasmicSecondfinancialperformance__OverridesType = {
  root?: Flex__<"div">;
  wireframe6?: Flex__<"div">;
  conversionOutput?: Flex__<"div">;
  container114?: Flex__<"div">;
  container113?: Flex__<"div">;
  button36?: Flex__<"div">;
  yourtextHereYourtexthere?: Flex__<"div">;
  image21?: Flex__<"div">;
  image22?: Flex__<"div">;
  container112?: Flex__<"div">;
  textarea2?: Flex__<"div">;
  container111?: Flex__<"div">;
  yourtextHereYourtextHere?: Flex__<"div">;
  image23?: Flex__<"div">;
  image24?: Flex__<"div">;
  image25?: Flex__<"div">;
  image26?: Flex__<"div">;
  container110?: Flex__<"div">;
  container104?: Flex__<"div">;
  yourtexthereYourtextHere?: Flex__<"div">;
  image27?: Flex__<"div">;
  image28?: Flex__<"div">;
  image29?: Flex__<"div">;
  container109?: Flex__<"div">;
  textarea1?: Flex__<"div">;
  container108?: Flex__<"div">;
  oneSourceOfTruthYourtextHere?: Flex__<"div">;
  image30?: Flex__<"div">;
  image31?: Flex__<"div">;
  container106?: Flex__<"div">;
  container107?: Flex__<"div">;
  button37?: Flex__<"div">;
  button38?: Flex__<"div">;
  container105?: Flex__<"div">;
  textbox9?: Flex__<"div">;
  button39?: Flex__<"div">;
  button40?: Flex__<"div">;
  image32?: Flex__<"div">;
  operationalWorkflowWithVisualizationAndAnalyticsManagement?: Flex__<"div">;
  iconButton2?: Flex__<"div">;
  svg?: Flex__<"svg">;
  image?: Flex__<"div">;
};

export interface DefaultSecondfinancialperformanceProps {
  className?: string;
}

const $$ = {};

function PlasmicSecondfinancialperformance__RenderFunc(props: {
  variants: PlasmicSecondfinancialperformance__VariantsArgs;
  args: PlasmicSecondfinancialperformance__ArgsType;
  overrides: PlasmicSecondfinancialperformance__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"wireframe6"}
        data-plasmic-override={overrides.wireframe6}
        className={classNames(projectcss.all, sty.wireframe6)}
      >
        <div
          data-plasmic-name={"conversionOutput"}
          data-plasmic-override={overrides.conversionOutput}
          className={classNames(projectcss.all, sty.conversionOutput)}
        >
          <div
            data-plasmic-name={"container114"}
            data-plasmic-override={overrides.container114}
            className={classNames(projectcss.all, sty.container114)}
          >
            <div
              data-plasmic-name={"container113"}
              data-plasmic-override={overrides.container113}
              className={classNames(projectcss.all, sty.container113)}
            >
              <div
                data-plasmic-name={"button36"}
                data-plasmic-override={overrides.button36}
                className={classNames(projectcss.all, sty.button36)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__idPgo
                  )}
                >
                  {"Analytics"}
                </div>
              </div>
              <div
                data-plasmic-name={"yourtextHereYourtexthere"}
                data-plasmic-override={overrides.yourtextHereYourtexthere}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.yourtextHereYourtexthere
                )}
              >
                {"Yourtext here\nYourtexthere"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xZn4D
                )}
              >
                {"Performance assessment"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ptdiX
                )}
              >
                {"Yourtexthere"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wLmp
                )}
              >
                {"Yourtext here"}
              </div>
              <div
                data-plasmic-name={"image21"}
                data-plasmic-override={overrides.image21}
                className={classNames(projectcss.all, sty.image21)}
              />

              <div
                data-plasmic-name={"image22"}
                data-plasmic-override={overrides.image22}
                className={classNames(projectcss.all, sty.image22)}
              />
            </div>
            <div
              data-plasmic-name={"container112"}
              data-plasmic-override={overrides.container112}
              className={classNames(projectcss.all, sty.container112)}
            >
              <div
                data-plasmic-name={"textarea2"}
                data-plasmic-override={overrides.textarea2}
                className={classNames(projectcss.all, sty.textarea2)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kV091
                  )}
                >
                  {
                    "Mobile devices\nYourtext here\nYourtext here\nYourtext here\nYourtext here"
                  }
                </div>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__fWLez)}
                  displayHeight={"12px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"12px"}
                  loading={"lazy"}
                  src={{
                    src: resizingHandle2W49CoVsCtl1J,
                    fullWidth: 12,
                    fullHeight: 12,
                    aspectRatio: 1
                  }}
                />
              </div>
            </div>
            <div
              data-plasmic-name={"container111"}
              data-plasmic-override={overrides.container111}
              className={classNames(projectcss.all, sty.container111)}
            >
              <div
                data-plasmic-name={"yourtextHereYourtextHere"}
                data-plasmic-override={overrides.yourtextHereYourtextHere}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.yourtextHereYourtextHere
                )}
              >
                {"Yourtext here\nYourtext here"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__thf8D
                )}
              >
                {"Interrogate and drill"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__haxD3
                )}
              >
                {"Yourtext here"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__obYBy
                )}
              >
                {"downmetrics"}
              </div>
              <div
                data-plasmic-name={"image23"}
                data-plasmic-override={overrides.image23}
                className={classNames(projectcss.all, sty.image23)}
              />

              <div
                data-plasmic-name={"image24"}
                data-plasmic-override={overrides.image24}
                className={classNames(projectcss.all, sty.image24)}
              />

              <div
                data-plasmic-name={"image25"}
                data-plasmic-override={overrides.image25}
                className={classNames(projectcss.all, sty.image25)}
              />

              <div
                data-plasmic-name={"image26"}
                data-plasmic-override={overrides.image26}
                className={classNames(projectcss.all, sty.image26)}
              />
            </div>
            <div
              data-plasmic-name={"container110"}
              data-plasmic-override={overrides.container110}
              className={classNames(projectcss.all, sty.container110)}
            >
              <div
                data-plasmic-name={"container104"}
                data-plasmic-override={overrides.container104}
                className={classNames(projectcss.all, sty.container104)}
              >
                <div
                  data-plasmic-name={"yourtexthereYourtextHere"}
                  data-plasmic-override={overrides.yourtexthereYourtextHere}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.yourtexthereYourtextHere
                  )}
                >
                  {"Yourtexthere\nYourtext here"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__e2Qd7
                  )}
                >
                  {"Native escalation and"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rQ6Wx
                  )}
                >
                  {"capture"}
                </div>
                <div
                  data-plasmic-name={"image27"}
                  data-plasmic-override={overrides.image27}
                  className={classNames(projectcss.all, sty.image27)}
                />

                <div
                  data-plasmic-name={"image28"}
                  data-plasmic-override={overrides.image28}
                  className={classNames(projectcss.all, sty.image28)}
                />

                <div
                  data-plasmic-name={"image29"}
                  data-plasmic-override={overrides.image29}
                  className={classNames(projectcss.all, sty.image29)}
                />
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tqusI
                )}
              >
                {"Your text here"}
              </div>
            </div>
            <div
              data-plasmic-name={"container109"}
              data-plasmic-override={overrides.container109}
              className={classNames(projectcss.all, sty.container109)}
            >
              <div
                data-plasmic-name={"textarea1"}
                data-plasmic-override={overrides.textarea1}
                className={classNames(projectcss.all, sty.textarea1)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tR4XO
                  )}
                >
                  {
                    "Yourtexthere\nYourtext here\nYourtext here\nYourtext here\nYourtexthere\nYourtexthere"
                  }
                </div>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__oiGnB)}
                  displayHeight={"12px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"12px"}
                  loading={"lazy"}
                  src={{
                    src: resizingHandle3HjPreqQRvos,
                    fullWidth: 12,
                    fullHeight: 12,
                    aspectRatio: 1
                  }}
                />
              </div>
            </div>
            <div
              data-plasmic-name={"container108"}
              data-plasmic-override={overrides.container108}
              className={classNames(projectcss.all, sty.container108)}
            >
              <div
                data-plasmic-name={"oneSourceOfTruthYourtextHere"}
                data-plasmic-override={overrides.oneSourceOfTruthYourtextHere}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.oneSourceOfTruthYourtextHere
                )}
              >
                {"One source of truth\nYourtext here"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bdthC
                )}
              >
                {"Data processing"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___5Aept
                )}
              >
                {"Yourtext here"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9Aj5A
                )}
              >
                {"Yourtext here"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sl28
                )}
              >
                {"Automate"}
              </div>
              <div
                data-plasmic-name={"image30"}
                data-plasmic-override={overrides.image30}
                className={classNames(projectcss.all, sty.image30)}
              />

              <div
                data-plasmic-name={"image31"}
                data-plasmic-override={overrides.image31}
                className={classNames(projectcss.all, sty.image31)}
              />
            </div>
            <div
              data-plasmic-name={"container106"}
              data-plasmic-override={overrides.container106}
              className={classNames(projectcss.all, sty.container106)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qkitB
                )}
              >
                {"Visualization"}
              </div>
            </div>
            <div
              data-plasmic-name={"container107"}
              data-plasmic-override={overrides.container107}
              className={classNames(projectcss.all, sty.container107)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hxh2L
                )}
              >
                {"Workflow"}
              </div>
            </div>
            <div
              data-plasmic-name={"button37"}
              data-plasmic-override={overrides.button37}
              className={classNames(projectcss.all, sty.button37)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__swbh
                )}
              >
                {"Aggregation"}
              </div>
            </div>
            <div
              data-plasmic-name={"button38"}
              data-plasmic-override={overrides.button38}
              className={classNames(projectcss.all, sty.button38)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3Vi1
                )}
              >
                {"Change"}
              </div>
            </div>
            <div
              data-plasmic-name={"container105"}
              data-plasmic-override={overrides.container105}
              className={classNames(projectcss.all, sty.container105)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3Y04S
                )}
              >
                {"Collaboration"}
              </div>
            </div>
            <div
              data-plasmic-name={"textbox9"}
              data-plasmic-override={overrides.textbox9}
              className={classNames(projectcss.all, sty.textbox9)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ur1Pa
                )}
              >
                {"Decison Suport"}
              </div>
            </div>
            <div
              data-plasmic-name={"button39"}
              data-plasmic-override={overrides.button39}
              className={classNames(projectcss.all, sty.button39)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nvLox
                )}
              >
                {"Workflow"}
              </div>
            </div>
            <div
              data-plasmic-name={"button40"}
              data-plasmic-override={overrides.button40}
              className={classNames(projectcss.all, sty.button40)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__siE5O
                )}
              >
                {"Outcome"}
              </div>
            </div>
            <div
              data-plasmic-name={"image32"}
              data-plasmic-override={overrides.image32}
              className={classNames(projectcss.all, sty.image32)}
            />
          </div>
          <div
            data-plasmic-name={
              "operationalWorkflowWithVisualizationAndAnalyticsManagement"
            }
            data-plasmic-override={
              overrides.operationalWorkflowWithVisualizationAndAnalyticsManagement
            }
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.operationalWorkflowWithVisualizationAndAnalyticsManagement
            )}
          >
            {
              "Operational Workflow with Visualization and\nAnalytics Management"
            }
          </div>
          <div
            data-plasmic-name={"iconButton2"}
            data-plasmic-override={overrides.iconButton2}
            className={classNames(projectcss.all, sty.iconButton2)}
          >
            <CaretRightIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={"img"}
            />
          </div>
          <div
            data-plasmic-name={"image"}
            data-plasmic-override={overrides.image}
            className={classNames(projectcss.all, sty.image)}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__yk2NC
            )}
          >
            {"X"}
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "wireframe6",
    "conversionOutput",
    "container114",
    "container113",
    "button36",
    "yourtextHereYourtexthere",
    "image21",
    "image22",
    "container112",
    "textarea2",
    "container111",
    "yourtextHereYourtextHere",
    "image23",
    "image24",
    "image25",
    "image26",
    "container110",
    "container104",
    "yourtexthereYourtextHere",
    "image27",
    "image28",
    "image29",
    "container109",
    "textarea1",
    "container108",
    "oneSourceOfTruthYourtextHere",
    "image30",
    "image31",
    "container106",
    "container107",
    "button37",
    "button38",
    "container105",
    "textbox9",
    "button39",
    "button40",
    "image32",
    "operationalWorkflowWithVisualizationAndAnalyticsManagement",
    "iconButton2",
    "svg",
    "image"
  ],
  wireframe6: [
    "wireframe6",
    "conversionOutput",
    "container114",
    "container113",
    "button36",
    "yourtextHereYourtexthere",
    "image21",
    "image22",
    "container112",
    "textarea2",
    "container111",
    "yourtextHereYourtextHere",
    "image23",
    "image24",
    "image25",
    "image26",
    "container110",
    "container104",
    "yourtexthereYourtextHere",
    "image27",
    "image28",
    "image29",
    "container109",
    "textarea1",
    "container108",
    "oneSourceOfTruthYourtextHere",
    "image30",
    "image31",
    "container106",
    "container107",
    "button37",
    "button38",
    "container105",
    "textbox9",
    "button39",
    "button40",
    "image32",
    "operationalWorkflowWithVisualizationAndAnalyticsManagement",
    "iconButton2",
    "svg",
    "image"
  ],
  conversionOutput: [
    "conversionOutput",
    "container114",
    "container113",
    "button36",
    "yourtextHereYourtexthere",
    "image21",
    "image22",
    "container112",
    "textarea2",
    "container111",
    "yourtextHereYourtextHere",
    "image23",
    "image24",
    "image25",
    "image26",
    "container110",
    "container104",
    "yourtexthereYourtextHere",
    "image27",
    "image28",
    "image29",
    "container109",
    "textarea1",
    "container108",
    "oneSourceOfTruthYourtextHere",
    "image30",
    "image31",
    "container106",
    "container107",
    "button37",
    "button38",
    "container105",
    "textbox9",
    "button39",
    "button40",
    "image32",
    "operationalWorkflowWithVisualizationAndAnalyticsManagement",
    "iconButton2",
    "svg",
    "image"
  ],
  container114: [
    "container114",
    "container113",
    "button36",
    "yourtextHereYourtexthere",
    "image21",
    "image22",
    "container112",
    "textarea2",
    "container111",
    "yourtextHereYourtextHere",
    "image23",
    "image24",
    "image25",
    "image26",
    "container110",
    "container104",
    "yourtexthereYourtextHere",
    "image27",
    "image28",
    "image29",
    "container109",
    "textarea1",
    "container108",
    "oneSourceOfTruthYourtextHere",
    "image30",
    "image31",
    "container106",
    "container107",
    "button37",
    "button38",
    "container105",
    "textbox9",
    "button39",
    "button40",
    "image32"
  ],
  container113: [
    "container113",
    "button36",
    "yourtextHereYourtexthere",
    "image21",
    "image22"
  ],
  button36: ["button36"],
  yourtextHereYourtexthere: ["yourtextHereYourtexthere"],
  image21: ["image21"],
  image22: ["image22"],
  container112: ["container112", "textarea2"],
  textarea2: ["textarea2"],
  container111: [
    "container111",
    "yourtextHereYourtextHere",
    "image23",
    "image24",
    "image25",
    "image26"
  ],
  yourtextHereYourtextHere: ["yourtextHereYourtextHere"],
  image23: ["image23"],
  image24: ["image24"],
  image25: ["image25"],
  image26: ["image26"],
  container110: [
    "container110",
    "container104",
    "yourtexthereYourtextHere",
    "image27",
    "image28",
    "image29"
  ],
  container104: [
    "container104",
    "yourtexthereYourtextHere",
    "image27",
    "image28",
    "image29"
  ],
  yourtexthereYourtextHere: ["yourtexthereYourtextHere"],
  image27: ["image27"],
  image28: ["image28"],
  image29: ["image29"],
  container109: ["container109", "textarea1"],
  textarea1: ["textarea1"],
  container108: [
    "container108",
    "oneSourceOfTruthYourtextHere",
    "image30",
    "image31"
  ],
  oneSourceOfTruthYourtextHere: ["oneSourceOfTruthYourtextHere"],
  image30: ["image30"],
  image31: ["image31"],
  container106: ["container106"],
  container107: ["container107"],
  button37: ["button37"],
  button38: ["button38"],
  container105: ["container105"],
  textbox9: ["textbox9"],
  button39: ["button39"],
  button40: ["button40"],
  image32: ["image32"],
  operationalWorkflowWithVisualizationAndAnalyticsManagement: [
    "operationalWorkflowWithVisualizationAndAnalyticsManagement"
  ],
  iconButton2: ["iconButton2", "svg"],
  svg: ["svg"],
  image: ["image"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  wireframe6: "div";
  conversionOutput: "div";
  container114: "div";
  container113: "div";
  button36: "div";
  yourtextHereYourtexthere: "div";
  image21: "div";
  image22: "div";
  container112: "div";
  textarea2: "div";
  container111: "div";
  yourtextHereYourtextHere: "div";
  image23: "div";
  image24: "div";
  image25: "div";
  image26: "div";
  container110: "div";
  container104: "div";
  yourtexthereYourtextHere: "div";
  image27: "div";
  image28: "div";
  image29: "div";
  container109: "div";
  textarea1: "div";
  container108: "div";
  oneSourceOfTruthYourtextHere: "div";
  image30: "div";
  image31: "div";
  container106: "div";
  container107: "div";
  button37: "div";
  button38: "div";
  container105: "div";
  textbox9: "div";
  button39: "div";
  button40: "div";
  image32: "div";
  operationalWorkflowWithVisualizationAndAnalyticsManagement: "div";
  iconButton2: "div";
  svg: "svg";
  image: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSecondfinancialperformance__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSecondfinancialperformance__VariantsArgs;
    args?: PlasmicSecondfinancialperformance__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSecondfinancialperformance__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSecondfinancialperformance__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSecondfinancialperformance__ArgProps,
          internalVariantPropNames:
            PlasmicSecondfinancialperformance__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSecondfinancialperformance__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSecondfinancialperformance";
  } else {
    func.displayName = `PlasmicSecondfinancialperformance.${nodeName}`;
  }
  return func;
}

export const PlasmicSecondfinancialperformance = Object.assign(
  // Top-level PlasmicSecondfinancialperformance renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    wireframe6: makeNodeComponent("wireframe6"),
    conversionOutput: makeNodeComponent("conversionOutput"),
    container114: makeNodeComponent("container114"),
    container113: makeNodeComponent("container113"),
    button36: makeNodeComponent("button36"),
    yourtextHereYourtexthere: makeNodeComponent("yourtextHereYourtexthere"),
    image21: makeNodeComponent("image21"),
    image22: makeNodeComponent("image22"),
    container112: makeNodeComponent("container112"),
    textarea2: makeNodeComponent("textarea2"),
    container111: makeNodeComponent("container111"),
    yourtextHereYourtextHere: makeNodeComponent("yourtextHereYourtextHere"),
    image23: makeNodeComponent("image23"),
    image24: makeNodeComponent("image24"),
    image25: makeNodeComponent("image25"),
    image26: makeNodeComponent("image26"),
    container110: makeNodeComponent("container110"),
    container104: makeNodeComponent("container104"),
    yourtexthereYourtextHere: makeNodeComponent("yourtexthereYourtextHere"),
    image27: makeNodeComponent("image27"),
    image28: makeNodeComponent("image28"),
    image29: makeNodeComponent("image29"),
    container109: makeNodeComponent("container109"),
    textarea1: makeNodeComponent("textarea1"),
    container108: makeNodeComponent("container108"),
    oneSourceOfTruthYourtextHere: makeNodeComponent(
      "oneSourceOfTruthYourtextHere"
    ),
    image30: makeNodeComponent("image30"),
    image31: makeNodeComponent("image31"),
    container106: makeNodeComponent("container106"),
    container107: makeNodeComponent("container107"),
    button37: makeNodeComponent("button37"),
    button38: makeNodeComponent("button38"),
    container105: makeNodeComponent("container105"),
    textbox9: makeNodeComponent("textbox9"),
    button39: makeNodeComponent("button39"),
    button40: makeNodeComponent("button40"),
    image32: makeNodeComponent("image32"),
    operationalWorkflowWithVisualizationAndAnalyticsManagement:
      makeNodeComponent(
        "operationalWorkflowWithVisualizationAndAnalyticsManagement"
      ),
    iconButton2: makeNodeComponent("iconButton2"),
    svg: makeNodeComponent("svg"),
    image: makeNodeComponent("image"),

    // Metadata about props expected for PlasmicSecondfinancialperformance
    internalVariantProps: PlasmicSecondfinancialperformance__VariantProps,
    internalArgProps: PlasmicSecondfinancialperformance__ArgProps
  }
);

export default PlasmicSecondfinancialperformance;
/* prettier-ignore-end */
