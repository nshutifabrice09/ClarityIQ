// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bVumzfkpaXXcvNmP8r5aNd
// Component: mrfDLG5qjXtW

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: bVumzfkpaXXcvNmP8r5aNd/projectcss
import sty from "./PlasmicRiskmanagement.module.css"; // plasmic-import: mrfDLG5qjXtW/css

createPlasmicElementProxy;

export type PlasmicRiskmanagement__VariantMembers = {};
export type PlasmicRiskmanagement__VariantsArgs = {};
type VariantPropType = keyof PlasmicRiskmanagement__VariantsArgs;
export const PlasmicRiskmanagement__VariantProps = new Array<VariantPropType>();

export type PlasmicRiskmanagement__ArgsType = {};
type ArgPropType = keyof PlasmicRiskmanagement__ArgsType;
export const PlasmicRiskmanagement__ArgProps = new Array<ArgPropType>();

export type PlasmicRiskmanagement__OverridesType = {
  root?: Flex__<"div">;
  wireframe14?: Flex__<"div">;
  screen14?: Flex__<"div">;
  table6?: Flex__<"div">;
  row?: Flex__<"div">;
  frame?: Flex__<"div">;
  frame2?: Flex__<"div">;
  frame3?: Flex__<"div">;
  frame4?: Flex__<"div">;
  row2?: Flex__<"div">;
  frame5?: Flex__<"div">;
  frame6?: Flex__<"div">;
  frame7?: Flex__<"div">;
  frame8?: Flex__<"div">;
  row3?: Flex__<"div">;
  frame9?: Flex__<"div">;
  frame10?: Flex__<"div">;
  frame11?: Flex__<"div">;
  frame12?: Flex__<"div">;
  header?: Flex__<"div">;
  frame13?: Flex__<"div">;
  frame14?: Flex__<"div">;
  frame15?: Flex__<"div">;
  frame16?: Flex__<"div">;
};

export interface DefaultRiskmanagementProps {
  className?: string;
}

const $$ = {};

function PlasmicRiskmanagement__RenderFunc(props: {
  variants: PlasmicRiskmanagement__VariantsArgs;
  args: PlasmicRiskmanagement__ArgsType;
  overrides: PlasmicRiskmanagement__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"wireframe14"}
        data-plasmic-override={overrides.wireframe14}
        className={classNames(projectcss.all, sty.wireframe14)}
      >
        <div
          data-plasmic-name={"screen14"}
          data-plasmic-override={overrides.screen14}
          className={classNames(projectcss.all, sty.screen14)}
        >
          <div
            data-plasmic-name={"table6"}
            data-plasmic-override={overrides.table6}
            className={classNames(projectcss.all, sty.table6)}
          >
            <div
              data-plasmic-name={"row"}
              data-plasmic-override={overrides.row}
              className={classNames(projectcss.all, sty.row)}
            >
              <div
                data-plasmic-name={"frame"}
                data-plasmic-override={overrides.frame}
                className={classNames(projectcss.all, sty.frame)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zfr0W
                  )}
                >
                  {"Ongoing"}
                </div>
              </div>
              <div
                data-plasmic-name={"frame2"}
                data-plasmic-override={overrides.frame2}
                className={classNames(projectcss.all, sty.frame2)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xymNs
                  )}
                >
                  {"Implementing regular maintenance schedules\t"}
                </div>
              </div>
              <div
                data-plasmic-name={"frame3"}
                data-plasmic-override={overrides.frame3}
                className={classNames(projectcss.all, sty.frame3)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__d8Vj4
                  )}
                >
                  {"Operational Risk\t"}
                </div>
              </div>
              <div
                data-plasmic-name={"frame4"}
                data-plasmic-override={overrides.frame4}
                className={classNames(projectcss.all, sty.frame4)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nkkA
                  )}
                >
                  {"Backup equipment ready for deployment"}
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"row2"}
              data-plasmic-override={overrides.row2}
              className={classNames(projectcss.all, sty.row2)}
            >
              <div
                data-plasmic-name={"frame5"}
                data-plasmic-override={overrides.frame5}
                className={classNames(projectcss.all, sty.frame5)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aBUu9
                  )}
                >
                  {"Establishing relationships with multiple suppliers\t"}
                </div>
              </div>
              <div
                data-plasmic-name={"frame6"}
                data-plasmic-override={overrides.frame6}
                className={classNames(projectcss.all, sty.frame6)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___62ZJf
                  )}
                >
                  {"Safety stock maintained"}
                </div>
              </div>
              <div
                data-plasmic-name={"frame7"}
                data-plasmic-override={overrides.frame7}
                className={classNames(projectcss.all, sty.frame7)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__e5HXw
                  )}
                >
                  {"Ongoing\t"}
                </div>
              </div>
              <div
                data-plasmic-name={"frame8"}
                data-plasmic-override={overrides.frame8}
                className={classNames(projectcss.all, sty.frame8)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xxqIm
                  )}
                >
                  {"Supply Chain Risk\t"}
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"row3"}
              data-plasmic-override={overrides.row3}
              className={classNames(projectcss.all, sty.row3)}
            >
              <div
                data-plasmic-name={"frame9"}
                data-plasmic-override={overrides.frame9}
                className={classNames(projectcss.all, sty.frame9)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jqD0
                  )}
                >
                  {"Regular compliance audits\t"}
                </div>
              </div>
              <div
                data-plasmic-name={"frame10"}
                data-plasmic-override={overrides.frame10}
                className={classNames(projectcss.all, sty.frame10)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__iwySa
                  )}
                >
                  {"Regulatory Risk\t"}
                </div>
              </div>
              <div
                data-plasmic-name={"frame11"}
                data-plasmic-override={overrides.frame11}
                className={classNames(projectcss.all, sty.frame11)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__khdUt
                  )}
                >
                  {"Completed\t"}
                </div>
              </div>
              <div
                data-plasmic-name={"frame12"}
                data-plasmic-override={overrides.frame12}
                className={classNames(projectcss.all, sty.frame12)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__sn6KA
                  )}
                >
                  {"Legal team on standby"}
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames(projectcss.all, sty.header)}
            >
              <div
                data-plasmic-name={"frame13"}
                data-plasmic-override={overrides.frame13}
                className={classNames(projectcss.all, sty.frame13)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__k2It
                  )}
                >
                  {"Mitigation Efforts\t"}
                </div>
              </div>
              <div
                data-plasmic-name={"frame14"}
                data-plasmic-override={overrides.frame14}
                className={classNames(projectcss.all, sty.frame14)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___5EQr
                  )}
                >
                  {"Risk Category\t"}
                </div>
              </div>
              <div
                data-plasmic-name={"frame15"}
                data-plasmic-override={overrides.frame15}
                className={classNames(projectcss.all, sty.frame15)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___5HOtv
                  )}
                >
                  {"Status (Ongoing/Completed)\t"}
                </div>
              </div>
              <div
                data-plasmic-name={"frame16"}
                data-plasmic-override={overrides.frame16}
                className={classNames(projectcss.all, sty.frame16)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vz7Os
                  )}
                >
                  {"Contingency Plan"}
                </div>
              </div>
            </div>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__sz56V
            )}
          >
            {"Risk Management"}
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "wireframe14",
    "screen14",
    "table6",
    "row",
    "frame",
    "frame2",
    "frame3",
    "frame4",
    "row2",
    "frame5",
    "frame6",
    "frame7",
    "frame8",
    "row3",
    "frame9",
    "frame10",
    "frame11",
    "frame12",
    "header",
    "frame13",
    "frame14",
    "frame15",
    "frame16"
  ],
  wireframe14: [
    "wireframe14",
    "screen14",
    "table6",
    "row",
    "frame",
    "frame2",
    "frame3",
    "frame4",
    "row2",
    "frame5",
    "frame6",
    "frame7",
    "frame8",
    "row3",
    "frame9",
    "frame10",
    "frame11",
    "frame12",
    "header",
    "frame13",
    "frame14",
    "frame15",
    "frame16"
  ],
  screen14: [
    "screen14",
    "table6",
    "row",
    "frame",
    "frame2",
    "frame3",
    "frame4",
    "row2",
    "frame5",
    "frame6",
    "frame7",
    "frame8",
    "row3",
    "frame9",
    "frame10",
    "frame11",
    "frame12",
    "header",
    "frame13",
    "frame14",
    "frame15",
    "frame16"
  ],
  table6: [
    "table6",
    "row",
    "frame",
    "frame2",
    "frame3",
    "frame4",
    "row2",
    "frame5",
    "frame6",
    "frame7",
    "frame8",
    "row3",
    "frame9",
    "frame10",
    "frame11",
    "frame12",
    "header",
    "frame13",
    "frame14",
    "frame15",
    "frame16"
  ],
  row: ["row", "frame", "frame2", "frame3", "frame4"],
  frame: ["frame"],
  frame2: ["frame2"],
  frame3: ["frame3"],
  frame4: ["frame4"],
  row2: ["row2", "frame5", "frame6", "frame7", "frame8"],
  frame5: ["frame5"],
  frame6: ["frame6"],
  frame7: ["frame7"],
  frame8: ["frame8"],
  row3: ["row3", "frame9", "frame10", "frame11", "frame12"],
  frame9: ["frame9"],
  frame10: ["frame10"],
  frame11: ["frame11"],
  frame12: ["frame12"],
  header: ["header", "frame13", "frame14", "frame15", "frame16"],
  frame13: ["frame13"],
  frame14: ["frame14"],
  frame15: ["frame15"],
  frame16: ["frame16"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  wireframe14: "div";
  screen14: "div";
  table6: "div";
  row: "div";
  frame: "div";
  frame2: "div";
  frame3: "div";
  frame4: "div";
  row2: "div";
  frame5: "div";
  frame6: "div";
  frame7: "div";
  frame8: "div";
  row3: "div";
  frame9: "div";
  frame10: "div";
  frame11: "div";
  frame12: "div";
  header: "div";
  frame13: "div";
  frame14: "div";
  frame15: "div";
  frame16: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRiskmanagement__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRiskmanagement__VariantsArgs;
    args?: PlasmicRiskmanagement__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRiskmanagement__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicRiskmanagement__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRiskmanagement__ArgProps,
          internalVariantPropNames: PlasmicRiskmanagement__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRiskmanagement__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRiskmanagement";
  } else {
    func.displayName = `PlasmicRiskmanagement.${nodeName}`;
  }
  return func;
}

export const PlasmicRiskmanagement = Object.assign(
  // Top-level PlasmicRiskmanagement renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    wireframe14: makeNodeComponent("wireframe14"),
    screen14: makeNodeComponent("screen14"),
    table6: makeNodeComponent("table6"),
    row: makeNodeComponent("row"),
    frame: makeNodeComponent("frame"),
    frame2: makeNodeComponent("frame2"),
    frame3: makeNodeComponent("frame3"),
    frame4: makeNodeComponent("frame4"),
    row2: makeNodeComponent("row2"),
    frame5: makeNodeComponent("frame5"),
    frame6: makeNodeComponent("frame6"),
    frame7: makeNodeComponent("frame7"),
    frame8: makeNodeComponent("frame8"),
    row3: makeNodeComponent("row3"),
    frame9: makeNodeComponent("frame9"),
    frame10: makeNodeComponent("frame10"),
    frame11: makeNodeComponent("frame11"),
    frame12: makeNodeComponent("frame12"),
    header: makeNodeComponent("header"),
    frame13: makeNodeComponent("frame13"),
    frame14: makeNodeComponent("frame14"),
    frame15: makeNodeComponent("frame15"),
    frame16: makeNodeComponent("frame16"),

    // Metadata about props expected for PlasmicRiskmanagement
    internalVariantProps: PlasmicRiskmanagement__VariantProps,
    internalArgProps: PlasmicRiskmanagement__ArgProps
  }
);

export default PlasmicRiskmanagement;
/* prettier-ignore-end */
