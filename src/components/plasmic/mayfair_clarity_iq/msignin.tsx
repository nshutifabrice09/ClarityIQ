// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bVumzfkpaXXcvNmP8r5aNd
// Component: M-lOIdIf7bAe

import * as React from "react";
import { useNavigate } from "react-router-dom"; 

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName,
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions,
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: bVumzfkpaXXcvNmP8r5aNd/projectcss
import sty from "./PlasmicSignin.module.css"; // plasmic-import: M-lOIdIf7bAe/css

import Oval7Icon from "./icons/PlasmicIcon__Oval7"; // plasmic-import: 9qnswPHCS8Yn/icon
import Oval8Icon from "./icons/PlasmicIcon__Oval8"; // plasmic-import: STi0_H4_JaFj/icon
import HideIcon from "./icons/PlasmicIcon__Hide"; // plasmic-import: EUBBmv06f6kG/icon
import AppleIcon from "./icons/PlasmicIcon__Apple"; // plasmic-import: wlA3qDnex-jr/icon
import LogoFacebookIcon from "./icons/PlasmicIcon__LogoFacebook"; // plasmic-import: qLxbwT6f_D5u/icon
import GoogleIcon from "./icons/PlasmicIcon__Google"; // plasmic-import: ta-PA2-2tho8/icon
import Frame13Icon from "./icons/PlasmicIcon__Frame13"; // plasmic-import: uOlqWmdySWqH/icon
import Group22Icon from "./icons/PlasmicIcon__Group22"; // plasmic-import: uhb9tZ47tTxF/icon
import Group23Icon from "./icons/PlasmicIcon__Group23"; // plasmic-import: 9rbNvo5iq4ng/icon
import Group24Icon from "./icons/PlasmicIcon__Group24"; // plasmic-import: _eh5SCK6bltj/icon
import Group25Icon from "./icons/PlasmicIcon__Group25"; // plasmic-import: WZ23QFlGCtfi/icon
import Group26Icon from "./icons/PlasmicIcon__Group26"; // plasmic-import: d09v7uLeDMdd/icon
import Group27Icon from "./icons/PlasmicIcon__Group27"; // plasmic-import: awy9ATn3wi_d/icon
import rectangle78Ll1F8YY4EIll from "./images/rectangle78.svg"; // plasmic-import: LL1F8yY4eIll/picture

createPlasmicElementProxy;

export type PlasmicSignin__VariantMembers = {};
export type PlasmicSignin__VariantsArgs = {};
type VariantPropType = keyof PlasmicSignin__VariantsArgs;
export const PlasmicSignin__VariantProps = new Array<VariantPropType>();

export type PlasmicSignin__ArgsType = {};
type ArgPropType = keyof PlasmicSignin__ArgsType;
export const PlasmicSignin__ArgProps = new Array<ArgPropType>();

export type PlasmicSignin__OverridesType = {
  root?: Flex__<"div">;
  wireframe17?: Flex__<"div">;
  signInWithEmailPassword1?: Flex__<"div">;
  rectangle37?: Flex__<"div">;
  container181?: Flex__<"div">;
  textbox12?: Flex__<"div">;
  button141?: Flex__<"div">;
  textbox13?: Flex__<"div">;
  enterAtLeast8Characters?: Flex__<"div">;
  button142?: Flex__<"div">;
  text?: Flex__<"div">;
  button143?: Flex__<"div">;
  text2?: Flex__<"div">;
  button144?: Flex__<"div">;
  text3?: Flex__<"div">;
  checkbox10?: Flex__<"div">;
  frame?: Flex__<"div">;
  rectangle?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  image79?: Flex__<"div">;
  group?: Flex__<"div">;
  group2?: Flex__<"div">;
  group3?: Flex__<"div">;
  group4?: Flex__<"div">;
};

export interface DefaultSigninProps {
  className?: string;
}

const $$ = {};

function PlasmicSignin__RenderFunc(props: {
  variants: PlasmicSignin__VariantsArgs;
  args: PlasmicSignin__ArgsType;
  overrides: PlasmicSignin__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const navigate = useNavigate(); 

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"wireframe17"}
            data-plasmic-override={overrides.wireframe17}
            className={classNames(projectcss.all, sty.wireframe17)}
          >
            <div
              data-plasmic-name={"signInWithEmailPassword1"}
              data-plasmic-override={overrides.signInWithEmailPassword1}
              className={classNames(
                projectcss.all,
                sty.signInWithEmailPassword1
              )}
            >
              <Oval7Icon
                className={classNames(projectcss.all, sty.svg___1NWxw)}
                role={"img"}
              />

              <div
                data-plasmic-name={"rectangle37"}
                data-plasmic-override={overrides.rectangle37}
                className={classNames(projectcss.all, sty.rectangle37)}
              />

              <Oval8Icon
                className={classNames(projectcss.all, sty.svg__jocFf)}
                role={"img"}
              />

              <div
                data-plasmic-name={"container181"}
                data-plasmic-override={overrides.container181}
                className={classNames(projectcss.all, sty.container181)}
              >
                <div
                  data-plasmic-name={"textbox12"}
                  data-plasmic-override={overrides.textbox12}
                  className={classNames(projectcss.all, sty.textbox12)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__f5M8
                    )}
                  >
                    {"example.email@gmail.com"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ggzUf
                    )}
                  >
                    {"Email"}
                  </div>
                </div>
                <div
                onClick={() => navigate("/")}
                  data-plasmic-name={"button141"}
                  data-plasmic-override={overrides.button141}
                  className={classNames(projectcss.all, sty.button141)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8Dq1S
                    )}
                  >
                    {"Sign in"}
                  </div>
                </div>
                <div
                  data-plasmic-name={"textbox13"}
                  data-plasmic-override={overrides.textbox13}
                  className={classNames(projectcss.all, sty.textbox13)}
                >
                  <div
                    data-plasmic-name={"enterAtLeast8Characters"}
                    data-plasmic-override={overrides.enterAtLeast8Characters}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.enterAtLeast8Characters
                    )}
                  >
                    {"Enter at least 8+ characters "}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qLQsk
                    )}
                  >
                    {"Password"}
                  </div>
                  <HideIcon
                    className={classNames(projectcss.all, sty.svg__iSicz)}
                    role={"img"}
                  />
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__oa42U
                  )}
                >
                  {"Sign in"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ccDfr
                  )}
                >
                  {"Forgot password?"}
                </div>
                <div
                  data-plasmic-name={"button142"}
                  data-plasmic-override={overrides.button142}
                  className={classNames(projectcss.all, sty.button142)}
                >
                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    {""}
                  </div>
                  <AppleIcon
                    className={classNames(projectcss.all, sty.svg___9Is4D)}
                    role={"img"}
                  />
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__g7AiI
                  )}
                >
                  {"Or sign in with"}
                </div>
                <div
                  data-plasmic-name={"button143"}
                  data-plasmic-override={overrides.button143}
                  className={classNames(projectcss.all, sty.button143)}
                >
                  <div
                    data-plasmic-name={"text2"}
                    data-plasmic-override={overrides.text2}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text2
                    )}
                  >
                    {""}
                  </div>
                  <LogoFacebookIcon
                    className={classNames(projectcss.all, sty.svg__lwFy2)}
                    role={"img"}
                  />
                </div>
                <div
                  data-plasmic-name={"button144"}
                  data-plasmic-override={overrides.button144}
                  className={classNames(projectcss.all, sty.button144)}
                >
                  <div
                    data-plasmic-name={"text3"}
                    data-plasmic-override={overrides.text3}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text3
                    )}
                  >
                    {""}
                  </div>
                  <GoogleIcon
                    className={classNames(projectcss.all, sty.svg___5TfIe)}
                    role={"img"}
                  />
                </div>
                <div
                  data-plasmic-name={"checkbox10"}
                  data-plasmic-override={overrides.checkbox10}
                  className={classNames(projectcss.all, sty.checkbox10)}
                >
                  <div
                    data-plasmic-name={"frame"}
                    data-plasmic-override={overrides.frame}
                    className={classNames(projectcss.all, sty.frame)}
                  >
                    <div
                      data-plasmic-name={"rectangle"}
                      data-plasmic-override={overrides.rectangle}
                      className={classNames(projectcss.all, sty.rectangle)}
                    />

                    <Frame13Icon
                      className={classNames(projectcss.all, sty.svg__xuQlK)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ip7IA
                      )}
                    >
                      {"Remember me"}
                    </div>
                  </div>
                </div>
                <PlasmicImg__
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"440px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"429px"}
                  loading={"lazy"}
                  src={{
                    src: rectangle78Ll1F8YY4EIll,
                    fullWidth: 429,
                    fullHeight: 440,
                    aspectRatio: 0.975,
                  }}
                />
              </div>
              <div
              onClick={() => navigate("/")}
                data-plasmic-name={"image79"}
                data-plasmic-override={overrides.image79}
                className={classNames(projectcss.all, sty.image79)}
              >
                <h2>ClarityIQ</h2>
              </div>
              <div
              onClick={() => navigate("/signup")}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___8Cdu
                )}
              >
                {"Doesn't have an account?"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sI4AO
                )}
              >
                {"Sign up"}
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "wireframe17",
    "signInWithEmailPassword1",
    "rectangle37",
    "container181",
    "textbox12",
    "button141",
    "textbox13",
    "enterAtLeast8Characters",
    "button142",
    "text",
    "button143",
    "text2",
    "button144",
    "text3",
    "checkbox10",
    "frame",
    "rectangle",
    "img",
    "image79",
    "group",
    "group2",
    "group3",
    "group4",
  ],
  wireframe17: [
    "wireframe17",
    "signInWithEmailPassword1",
    "rectangle37",
    "container181",
    "textbox12",
    "button141",
    "textbox13",
    "enterAtLeast8Characters",
    "button142",
    "text",
    "button143",
    "text2",
    "button144",
    "text3",
    "checkbox10",
    "frame",
    "rectangle",
    "img",
    "image79",
    "group",
    "group2",
    "group3",
    "group4",
  ],
  signInWithEmailPassword1: [
    "signInWithEmailPassword1",
    "rectangle37",
    "container181",
    "textbox12",
    "button141",
    "textbox13",
    "enterAtLeast8Characters",
    "button142",
    "text",
    "button143",
    "text2",
    "button144",
    "text3",
    "checkbox10",
    "frame",
    "rectangle",
    "img",
    "image79",
    "group",
    "group2",
    "group3",
    "group4",
  ],
  rectangle37: ["rectangle37"],
  container181: [
    "container181",
    "textbox12",
    "button141",
    "textbox13",
    "enterAtLeast8Characters",
    "button142",
    "text",
    "button143",
    "text2",
    "button144",
    "text3",
    "checkbox10",
    "frame",
    "rectangle",
    "img",
  ],
  textbox12: ["textbox12"],
  button141: ["button141"],
  textbox13: ["textbox13", "enterAtLeast8Characters"],
  enterAtLeast8Characters: ["enterAtLeast8Characters"],
  button142: ["button142", "text"],
  text: ["text"],
  button143: ["button143", "text2"],
  text2: ["text2"],
  button144: ["button144", "text3"],
  text3: ["text3"],
  checkbox10: ["checkbox10", "frame", "rectangle"],
  frame: ["frame", "rectangle"],
  rectangle: ["rectangle"],
  img: ["img"],
  image79: ["image79", "group", "group2", "group3", "group4"],
  group: ["group", "group2", "group3", "group4"],
  group2: ["group2", "group3", "group4"],
  group3: ["group3", "group4"],
  group4: ["group4"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  wireframe17: "div";
  signInWithEmailPassword1: "div";
  rectangle37: "div";
  container181: "div";
  textbox12: "div";
  button141: "div";
  textbox13: "div";
  enterAtLeast8Characters: "div";
  button142: "div";
  text: "div";
  button143: "div";
  text2: "div";
  button144: "div";
  text3: "div";
  checkbox10: "div";
  frame: "div";
  rectangle: "div";
  img: typeof PlasmicImg__;
  image79: "div";
  group: "div";
  group2: "div";
  group3: "div";
  group4: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSignin__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSignin__VariantsArgs;
    args?: PlasmicSignin__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSignin__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSignin__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSignin__ArgProps,
          internalVariantPropNames: PlasmicSignin__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicSignin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSignin";
  } else {
    func.displayName = `PlasmicSignin.${nodeName}`;
  }
  return func;
}

export const PlasmicSignin = Object.assign(
  // Top-level PlasmicSignin renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    wireframe17: makeNodeComponent("wireframe17"),
    signInWithEmailPassword1: makeNodeComponent("signInWithEmailPassword1"),
    rectangle37: makeNodeComponent("rectangle37"),
    container181: makeNodeComponent("container181"),
    textbox12: makeNodeComponent("textbox12"),
    button141: makeNodeComponent("button141"),
    textbox13: makeNodeComponent("textbox13"),
    enterAtLeast8Characters: makeNodeComponent("enterAtLeast8Characters"),
    button142: makeNodeComponent("button142"),
    text: makeNodeComponent("text"),
    button143: makeNodeComponent("button143"),
    text2: makeNodeComponent("text2"),
    button144: makeNodeComponent("button144"),
    text3: makeNodeComponent("text3"),
    checkbox10: makeNodeComponent("checkbox10"),
    frame: makeNodeComponent("frame"),
    rectangle: makeNodeComponent("rectangle"),
    img: makeNodeComponent("img"),
    image79: makeNodeComponent("image79"),
    group: makeNodeComponent("group"),
    group2: makeNodeComponent("group2"),
    group3: makeNodeComponent("group3"),
    group4: makeNodeComponent("group4"),

    // Metadata about props expected for PlasmicSignin
    internalVariantProps: PlasmicSignin__VariantProps,
    internalArgProps: PlasmicSignin__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: "",
    },
  }
);

export default PlasmicSignin;
/* prettier-ignore-end */
