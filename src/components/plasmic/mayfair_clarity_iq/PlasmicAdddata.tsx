// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bVumzfkpaXXcvNmP8r5aNd
// Component: 8QFBCeDeJFH_

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: bVumzfkpaXXcvNmP8r5aNd/projectcss
import sty from "./PlasmicAdddata.module.css"; // plasmic-import: 8QFBCeDeJFH_/css

import Vector2Icon from "./icons/PlasmicIcon__Vector2"; // plasmic-import: WyDwLf9NRq7C/icon
import ChevronDownLarge2Icon from "./icons/PlasmicIcon__ChevronDownLarge2"; // plasmic-import: dScs6CDelQTJ/icon
import Calendar3Icon from "./icons/PlasmicIcon__Calendar3"; // plasmic-import: p3C_jR3V7x0F/icon

createPlasmicElementProxy;

export type PlasmicAdddata__VariantMembers = {};
export type PlasmicAdddata__VariantsArgs = {};
type VariantPropType = keyof PlasmicAdddata__VariantsArgs;
export const PlasmicAdddata__VariantProps = new Array<VariantPropType>();

export type PlasmicAdddata__ArgsType = {};
type ArgPropType = keyof PlasmicAdddata__ArgsType;
export const PlasmicAdddata__ArgProps = new Array<ArgPropType>();

export type PlasmicAdddata__OverridesType = {
  root?: Flex__<"div">;
  frame?: Flex__<"div">;
  container98?: Flex__<"div">;
  textbox25?: Flex__<"div">;
  textfield?: Flex__<"div">;
  selectProperty?: Flex__<"div">;
  property?: Flex__<"div">;
  textbox26?: Flex__<"div">;
  textfield2?: Flex__<"div">;
  inputText?: Flex__<"div">;
  rentalName?: Flex__<"div">;
  addNewRental?: Flex__<"div">;
  checkbox22?: Flex__<"div">;
  frame2?: Flex__<"div">;
  rectangle?: Flex__<"div">;
  checkbox?: Flex__<"div">;
  frame3?: Flex__<"div">;
  rectangle2?: Flex__<"div">;
  checkbox2?: Flex__<"div">;
  button43?: Flex__<"div">;
  button44?: Flex__<"div">;
  textbox30?: Flex__<"div">;
  endDate?: Flex__<"div">;
  textfield3?: Flex__<"div">;
  textbox31?: Flex__<"div">;
  startDate?: Flex__<"div">;
  textfield4?: Flex__<"div">;
};

export interface DefaultAdddataProps {
  className?: string;
}

const $$ = {};

function PlasmicAdddata__RenderFunc(props: {
  variants: PlasmicAdddata__VariantsArgs;
  args: PlasmicAdddata__ArgsType;
  overrides: PlasmicAdddata__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"frame"}
        data-plasmic-override={overrides.frame}
        className={classNames(projectcss.all, sty.frame)}
      >
        <Vector2Icon
          className={classNames(projectcss.all, sty.svg__fqUwa)}
          role={"img"}
        />

        <div
          data-plasmic-name={"container98"}
          data-plasmic-override={overrides.container98}
          className={classNames(projectcss.all, sty.container98)}
        >
          <div
            data-plasmic-name={"textbox25"}
            data-plasmic-override={overrides.textbox25}
            className={classNames(projectcss.all, sty.textbox25)}
          >
            <div
              data-plasmic-name={"textfield"}
              data-plasmic-override={overrides.textfield}
              className={classNames(projectcss.all, sty.textfield)}
            >
              <div
                data-plasmic-name={"selectProperty"}
                data-plasmic-override={overrides.selectProperty}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.selectProperty
                )}
              >
                {"Active"}
              </div>
              <ChevronDownLarge2Icon
                className={classNames(projectcss.all, sty.svg__we9SM)}
                role={"img"}
              />
            </div>
            <div
              data-plasmic-name={"property"}
              data-plasmic-override={overrides.property}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.property
              )}
            >
              {"Status"}
            </div>
          </div>
          <div
            data-plasmic-name={"textbox26"}
            data-plasmic-override={overrides.textbox26}
            className={classNames(projectcss.all, sty.textbox26)}
          >
            <div
              data-plasmic-name={"textfield2"}
              data-plasmic-override={overrides.textfield2}
              className={classNames(projectcss.all, sty.textfield2)}
            >
              <div
                data-plasmic-name={"inputText"}
                data-plasmic-override={overrides.inputText}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.inputText
                )}
              >
                {"Name"}
              </div>
            </div>
            <div
              data-plasmic-name={"rentalName"}
              data-plasmic-override={overrides.rentalName}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.rentalName
              )}
            >
              {"Data source"}
            </div>
          </div>
          <div
            data-plasmic-name={"addNewRental"}
            data-plasmic-override={overrides.addNewRental}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.addNewRental
            )}
          >
            {"Add Data Integration and Aggregation"}
          </div>
          <div
            data-plasmic-name={"checkbox22"}
            data-plasmic-override={overrides.checkbox22}
            className={classNames(projectcss.all, sty.checkbox22)}
          >
            <div
              data-plasmic-name={"frame2"}
              data-plasmic-override={overrides.frame2}
              className={classNames(projectcss.all, sty.frame2)}
            >
              <div
                data-plasmic-name={"rectangle"}
                data-plasmic-override={overrides.rectangle}
                className={classNames(projectcss.all, sty.rectangle)}
              />

              <div
                data-plasmic-name={"checkbox"}
                data-plasmic-override={overrides.checkbox}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.checkbox
                )}
              >
                {"Edit"}
              </div>
            </div>
            <div
              data-plasmic-name={"frame3"}
              data-plasmic-override={overrides.frame3}
              className={classNames(projectcss.all, sty.frame3)}
            >
              <div
                data-plasmic-name={"rectangle2"}
                data-plasmic-override={overrides.rectangle2}
                className={classNames(projectcss.all, sty.rectangle2)}
              />

              <div
                data-plasmic-name={"checkbox2"}
                data-plasmic-override={overrides.checkbox2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.checkbox2
                )}
              >
                {"Delete"}
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"button43"}
            data-plasmic-override={overrides.button43}
            className={classNames(projectcss.all, sty.button43)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mwWl4
              )}
            >
              {"Save"}
            </div>
          </div>
          <div
            data-plasmic-name={"button44"}
            data-plasmic-override={overrides.button44}
            className={classNames(projectcss.all, sty.button44)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nPr40
              )}
            >
              {"Cancel"}
            </div>
          </div>
          <div
            data-plasmic-name={"textbox30"}
            data-plasmic-override={overrides.textbox30}
            className={classNames(projectcss.all, sty.textbox30)}
          >
            <div
              data-plasmic-name={"endDate"}
              data-plasmic-override={overrides.endDate}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.endDate
              )}
            >
              {"Last synced Date"}
            </div>
            <div
              data-plasmic-name={"textfield3"}
              data-plasmic-override={overrides.textfield3}
              className={classNames(projectcss.all, sty.textfield3)}
            >
              <Calendar3Icon
                className={classNames(projectcss.all, sty.svg__bYQi)}
                role={"img"}
              />
            </div>
          </div>
          <div
            data-plasmic-name={"textbox31"}
            data-plasmic-override={overrides.textbox31}
            className={classNames(projectcss.all, sty.textbox31)}
          >
            <div
              data-plasmic-name={"startDate"}
              data-plasmic-override={overrides.startDate}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.startDate
              )}
            >
              {"Type"}
            </div>
            <div
              data-plasmic-name={"textfield4"}
              data-plasmic-override={overrides.textfield4}
              className={classNames(projectcss.all, sty.textfield4)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tArTj
                )}
              >
                {"Input text"}
              </div>
            </div>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___0I63M
            )}
          >
            {"Action"}
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "frame",
    "container98",
    "textbox25",
    "textfield",
    "selectProperty",
    "property",
    "textbox26",
    "textfield2",
    "inputText",
    "rentalName",
    "addNewRental",
    "checkbox22",
    "frame2",
    "rectangle",
    "checkbox",
    "frame3",
    "rectangle2",
    "checkbox2",
    "button43",
    "button44",
    "textbox30",
    "endDate",
    "textfield3",
    "textbox31",
    "startDate",
    "textfield4"
  ],
  frame: [
    "frame",
    "container98",
    "textbox25",
    "textfield",
    "selectProperty",
    "property",
    "textbox26",
    "textfield2",
    "inputText",
    "rentalName",
    "addNewRental",
    "checkbox22",
    "frame2",
    "rectangle",
    "checkbox",
    "frame3",
    "rectangle2",
    "checkbox2",
    "button43",
    "button44",
    "textbox30",
    "endDate",
    "textfield3",
    "textbox31",
    "startDate",
    "textfield4"
  ],
  container98: [
    "container98",
    "textbox25",
    "textfield",
    "selectProperty",
    "property",
    "textbox26",
    "textfield2",
    "inputText",
    "rentalName",
    "addNewRental",
    "checkbox22",
    "frame2",
    "rectangle",
    "checkbox",
    "frame3",
    "rectangle2",
    "checkbox2",
    "button43",
    "button44",
    "textbox30",
    "endDate",
    "textfield3",
    "textbox31",
    "startDate",
    "textfield4"
  ],
  textbox25: ["textbox25", "textfield", "selectProperty", "property"],
  textfield: ["textfield", "selectProperty"],
  selectProperty: ["selectProperty"],
  property: ["property"],
  textbox26: ["textbox26", "textfield2", "inputText", "rentalName"],
  textfield2: ["textfield2", "inputText"],
  inputText: ["inputText"],
  rentalName: ["rentalName"],
  addNewRental: ["addNewRental"],
  checkbox22: [
    "checkbox22",
    "frame2",
    "rectangle",
    "checkbox",
    "frame3",
    "rectangle2",
    "checkbox2"
  ],
  frame2: ["frame2", "rectangle", "checkbox"],
  rectangle: ["rectangle"],
  checkbox: ["checkbox"],
  frame3: ["frame3", "rectangle2", "checkbox2"],
  rectangle2: ["rectangle2"],
  checkbox2: ["checkbox2"],
  button43: ["button43"],
  button44: ["button44"],
  textbox30: ["textbox30", "endDate", "textfield3"],
  endDate: ["endDate"],
  textfield3: ["textfield3"],
  textbox31: ["textbox31", "startDate", "textfield4"],
  startDate: ["startDate"],
  textfield4: ["textfield4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  frame: "div";
  container98: "div";
  textbox25: "div";
  textfield: "div";
  selectProperty: "div";
  property: "div";
  textbox26: "div";
  textfield2: "div";
  inputText: "div";
  rentalName: "div";
  addNewRental: "div";
  checkbox22: "div";
  frame2: "div";
  rectangle: "div";
  checkbox: "div";
  frame3: "div";
  rectangle2: "div";
  checkbox2: "div";
  button43: "div";
  button44: "div";
  textbox30: "div";
  endDate: "div";
  textfield3: "div";
  textbox31: "div";
  startDate: "div";
  textfield4: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAdddata__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAdddata__VariantsArgs;
    args?: PlasmicAdddata__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAdddata__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAdddata__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAdddata__ArgProps,
          internalVariantPropNames: PlasmicAdddata__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAdddata__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAdddata";
  } else {
    func.displayName = `PlasmicAdddata.${nodeName}`;
  }
  return func;
}

export const PlasmicAdddata = Object.assign(
  // Top-level PlasmicAdddata renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    frame: makeNodeComponent("frame"),
    container98: makeNodeComponent("container98"),
    textbox25: makeNodeComponent("textbox25"),
    textfield: makeNodeComponent("textfield"),
    selectProperty: makeNodeComponent("selectProperty"),
    property: makeNodeComponent("property"),
    textbox26: makeNodeComponent("textbox26"),
    textfield2: makeNodeComponent("textfield2"),
    inputText: makeNodeComponent("inputText"),
    rentalName: makeNodeComponent("rentalName"),
    addNewRental: makeNodeComponent("addNewRental"),
    checkbox22: makeNodeComponent("checkbox22"),
    frame2: makeNodeComponent("frame2"),
    rectangle: makeNodeComponent("rectangle"),
    checkbox: makeNodeComponent("checkbox"),
    frame3: makeNodeComponent("frame3"),
    rectangle2: makeNodeComponent("rectangle2"),
    checkbox2: makeNodeComponent("checkbox2"),
    button43: makeNodeComponent("button43"),
    button44: makeNodeComponent("button44"),
    textbox30: makeNodeComponent("textbox30"),
    endDate: makeNodeComponent("endDate"),
    textfield3: makeNodeComponent("textfield3"),
    textbox31: makeNodeComponent("textbox31"),
    startDate: makeNodeComponent("startDate"),
    textfield4: makeNodeComponent("textfield4"),

    // Metadata about props expected for PlasmicAdddata
    internalVariantProps: PlasmicAdddata__VariantProps,
    internalArgProps: PlasmicAdddata__ArgProps
  }
);

export default PlasmicAdddata;
/* prettier-ignore-end */
